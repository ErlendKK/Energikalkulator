import { nanoid } from '@reduxjs/toolkit'
id: nanoid()

begrens lengden som vises:
 <p className="post-content">{post.content.substring(0, 100)}</p>

organiser importer:
externe importer -> import av egne moduler

import React from 'react'
import { useDispatch } from 'react-redux'

import { reactionAdded } from './postsSlice'


<Route
  path="dashboard"
  loader={async () => {
    const user = await fake.getUser();
    if (!user) {
      // if you know you can't render the route, you can
      // throw a redirect to stop executing code here,
      // sending the user to a new route
      throw redirect("/login");
    }

    // otherwise continue
    const stats = await fake.getDashboardStats();
    return { user, stats };
  }}
/>

Preprepare data before calling the reducer.

const postsSlice = createSlice({
  name: 'posts',
  initialState,
  reducers: {
    postAdded: {
      reducer(state, action) {
        state.push(action.payload)
      },
      prepare(title, content, userId) {
        return {
          payload: {
            id: nanoid(),
            // data-format "2023-07-07T14:27:00.000Z"
            date: new Date().toISOString(),
            title,
            content,
            user: userId,
          },
        }
      },
    },

deaktiver knapp om obligatoriske felt mangler:

const canSave = Boolean(title) && Boolean(content) && Boolean(userId)
<button type="button" onClick={onSavePostClicked} disabled={!canSave}>


Timeago.js:

import React from 'react'
import { parseISO, formatDistanceToNow } from 'date-fns'

export const TimeAgo = ({ timestamp }) => {
  let timeAgo = ''
  if (timestamp) {
    const date = parseISO(timestamp)
    const timePeriod = formatDistanceToNow(date)
    timeAgo = `${timePeriod} ago`
  }

  return (
    <span title={timestamp}>
      &nbsp; <i>{timeAgo}</i>
    </span>
  )
}


 // Sort posts in reverse chronological order by datetime string
  const orderedPosts = [...posts].sort((a, b) => b.date.localeCompare(a.date))


thunks
skriv dem som hÃ¸yere-ordens funksjoner som returnerer thunks-funksjoner: thunk action createre
plasser dem i slice-filene


Routing on click
import { useHistory } from 'react-router-dom'

export const EditPostForm = ({ match }) => {
  const history = useHistory()

  const onSubmit = () => {
      dispatch(someSelector(someValues))
      history.push(`/posts/${postId}`)
  }


state machine for tracking the state of requests

{
  // Multiple possible status enum values
  status: 'idle' | 'loading' | 'succeeded' | 'failed',
  error: string | null
}

